
        1) #91 and PR #111 Remove unnecessary __init__.py files.

release 1.5.1 3rd December 2017

	1) #53 and PR #88 Add a version file so that PSyclone does not
	need to be installed to generate documentation.

	2) #94, #96, #98 and PR #97 Make name="name" support in invoke
	calls more robust e.g. names must be valid fortran and match
	should be insensitive to case.

	3) #76 and PR #89 Add support for the new LFRic quadrature
	api. Currently only gh_quadrature_xyoz is supported.

        4) #99 and PR #100 Make the author list for the user manual
        strictly alphabetical.

        5) #50 and PR #78 Implement a redundant-computation transformation.
        This enables a user to request that a kernel (or kernels) is
        computed out into the halo region and any affected halo swaps
        be updated (and/or removed) as required.

        6) #103 and PR #104. Bug fix to ensure that a halo swap is not
        inserted if read annexed dofs are already clean due to a previous
	write to the L1 halo.

release 1.5.0 3rd October 2017

        1) #20 and PR #28 Add dependence analysis (and a Move
        transformation) to PSyclone. This will subsequently allow for
        the safe implementation of more complex schedule transformations
        and optimisations.

	2) #16 and PR #29 Update and add new PSyclone-generated builtins
	to support the functionality required by the current LFRic code.

        3) #43 and PR #44 Update of Met Office-specific install script to
	symlink the generator.py file rather than copy it.

	4) #40 and PR #47 Update example dynamo/eg3 to use builtins and to
	merge invokes together as much as possible

	5) #45 and PR #49 Change of kernel metadata names from
	evaluator_shape to gh_shape and modifications to its values.

	6) #3 and PR #51 Restructure repository to allow installation via
	pip. Due to this change we can now use travis and coveralls within
	github for automated testing. Also, new releases are now
	automatically uploaded to pypi (via travis) and status badges can
	now be used so have been added to the README.md file (which is
	shown on the main github page).

	7) #55 and PR #66 Update the documentation to cover installation
	on systems running OpenSUSE.

	8) #61 and PR #71 Re-name existing Dynamo0.3 builtins to follow
	a consistent scheme and add support for some new ones (including
	setval_{c,X}, X_minus_bY etc.). See psyclone.pdf for the full list.

	9) #32 and PR #39 Adds the ability to build the generated code
	when performing python tests. Generated code can now be checked
	that it compiles as part of the development process helping avoid
	making releases with errors in them. Note, existing tests still
	need to be updated.

	10) #54 and PR #63 The view() method (used to look at the internal
	representation of a schedule) now outputs coloured text (for
	easier viewing) if the termcolor package is installed.

	11) #69 and PR #73 setup.py now uses an absolute path to avoid
	failing tests (with file not found) in some environments when
	running py.test from a different directory to the tests
	themselves.

	12) #59 and PR #75 added metadata support for inter-grid kernels
	which will be used for the multi-grid code.

	13) #82 and PR #83 modified a test to work with different versions
	of graphviz which output files with different ammounts of white
	space

	14) #52 and PR #60 added support for evaluators. An evaluator is
	specified by setting the gh_shape metadata in kernels
	appropriately.

	15) #85 and PR #86 - minor correction to documentation (section
	on Inter-Grid kernel rules was in the wrong place).

release 1.4.1

	1) #22 Updated PSyclone to support enforce_operator_bc_kernel (in
	addition to the existing enforce_bc_kernel) for boundary
	conditions. PSyclone no longer adds in boundary condition calls
	after a call to matrix_vector_kernel, it is up to the user to add
	them in the algorithm layer in all cases. Also fixes a bug
	introduced in 1.4.0 issue #12.

release 1.4.0

        1) #2 Add support for kernel meta-data changes required to support
        Column-wise operators (Column Matrix Assembly).

	2) #6 Implement support for Column Matrix Assembly (CMA) in
	PSyclone.

	3) #12 Add support for the any_w2 function space descriptor

	4) #33 Update documentation referring to fparser.

release 1.3.3

	1) Project moved to github: https://github.com/stfc/PSyclone.
        Hereon, ticket numbers now refer to github issues instead of
        SRS tickets.

        2) #8 Remove the f2py source code from the PSyclone distribution
	and use the fparser package (https://github.com/stfc/fparser)
	instead.

	3) #9 Update documentation to refer to github.

release 1.3.2

	1) #908 Bug fix - ensure that the dynamo0p3 loop colour
	transformation raises an exception if the loop it is applied to
	does not iterate over cells.

	2) #923 Change the name of the generated Fortran module containing
	PSy-layer code for the Dynamo 0.3 API. The name is constructed by
	appending "_psy" to the Algorithm-layer name. (Previously "psy_"
	was prepended to it.) The names of modules produced by other
	PSyclone APIs are unchanged.

release 1.3.1

	1) #846 Bug fix - generate correct logic and code for the call to
	enforce_bc_kernel after a call to matrix_vector_kernel. Also add
	w2h and w2v as spaces that cause enforce_bc_kernel to be called in
	addition to W1 and W2.

	2) #853 Bug fix - make sure that an operator object is only used
	as a lookup for values in the PSy layer when it is correct to do
	so. In particular, make sure that the dofmap lookup is always from
	a field, as this fixes the known bug.

release 1.3.0

        1) #686 Stencil extents (depth of the stencil) are now changed to
	stencil sizes (number of elements in the stencil) in the PSy-layer
	as the algorithm expects to provide the former and the kernel
	expects to receive the latter.

        2) #706 Avoid potential name clashes with stencil extent and
	direction arguments (as well as nlayers).

	3) #673 Fixed an xfailing built-in test

        4) #721 Bug fix - generate correct variable declarations and
        module use statements without modifying original arguments. Invokes
        requiring multiple enforce-bc kernel calls are now handled correctly.

        5) #727 Addition of install script (contributions/install) to
	support Met Office modules environment.

        6) #423 Add support for distributed-memory for built-ins.
        Global sums are now generated for calls to inner_product and
        sum_field built-in kernels.

        7) #489 Support the dereferencing of an object/derived type in the
	argument list of a kernel call within an invoke in the algorithm
	layer e.g. call invoke(kern(a%b))

	8) #669 Added support for named arguments to the expression
	analyser. This is the first step towards supporting named invokes
	in PSyclone.

        9) #628 dofmap lookups are now outside loops in the
	PSy-layer. This makes no functional difference but should give a
	performance benefit.

        10) #304 Added support for named invokes in PSyclone.

	11) #580 Implemented tests for the agreed dynamo0.3 builtin
	rules. For example, all fields must be on the same function space
	within a builtin.

	12) #761 Added support for parsing evaluator metadata.

        13) #484 Add support for the use of OpenMP (including reductions)
        with builtins.

        14) #819 Re-structuring of DynKern._create_arg_list. Replaced with
	new ArgList base class which is then sub-classed to KernCallArgList
	and KernStubArgList.

	15) #576 Added tests and documentation to check and describe the
	dynamo0.3 api kernel and builtin rules.

release 1.2.4

        1) #658 Adds support for the use of real and integer literals with
	kind specified in kernel calls from the algorithm layer. For
	example 0.0_rdef. This will be particularly useful for built-ins.

        2) #475 Fixes any remaining string assert comparison errors in
	tests. Updates algen_test.py to be pep8, pyflakes and pylint
	compliant.

	3) #468 Add support for kernels that perform stencil operations.
	Stencil depth is specified at the algorithm layer.

        4) #672 Fix error in boundary layer code generation for
	matrix_vector_kernel. The function space check is now always
	correct (hopefully).

        5) #680 Bug fix: the kernel stub generator was not adding the stencil
	dofmap required by a field with stencil access.

release 1.2.3

        1) #111 Adds support for dynamo0.3 built-in operations running
	sequentially.

        2) #640 Update PSyclone to call enforce_bc_kernel after every
	call to matrix_vector_kernel if the space is W1 or W2. (Previously
	PSyclone looked for matrix_vector_mm_kernel and only W2.)

	3) #430 Adds support for multiple kernels within an invoke with
	kernel arguments specified as any_space. Previously there was a
	limit of one kernel per invoke. This is particularly relevant for
	built-ins as all of these currently have arguments that are
	any_space.

	4) #657 Changes to the declaration and assignment of the mesh
	object (it is now a pointer) within the generated PSy layer so as
	to use the mesh singleton and not generate a temporary copy of it.

release 1.2.2

        1) #575 Add parser support for stencil meta-data.

        2) #587 Changed scalar metadata names to gh_real and gh_integer

        3) #501 Updates to parser and documentation to support writing to
	scalar arguments (reductions). Note that this is currently only
	supported for serial code. Implementation of this functionality
	for OpenMP and MPI will be done under #484 and #423, respectively.

	4) #235 PSyclone now uses the appropriate intent for arguments in
	the generated PSy code. Previously it always used inout. This
	allows the algorithm developer to specify the intent of data in
	the algorithm layer appropriately, rather than being forced to use
	inout in all cases.

        5) #604 If PSyclone encounters an Algorithm file that contains no
	invoke calls then it now issues a warning and outputs that file
	unchanged (previously it did not output a file at all). No PSy
	file is created in this case.

        6) #618 fix for #235. Data with intent out should have fields
	declared as inout as internal subroutines within the field are
	dereferenced so are required as intent in.

	7) #610 When PSyclone is operating in line length limiting mode
	("-l" switch) problems are caused if it breaks a line in the middle
	of a string. PSyclone now prefixes all continued lines with an
	ampersand. This then produces valid Fortran irrespective of whether
	the line-break happens within a string.

release 1.2.1

        1) Added a PSyclone logo

        2) #360 Internal code structure changes to make the Node class
	calls() method more intuitive and consistent with other methods. A
	side effect is that the OpenMP private list should no longer
	contain any variables names that are not required (as this change
	fixes that bug).

        3) #546 Bug fix for colouring when a kernel is passed an operator.
        PSyclone was not generating the correct cell look-up when
        colouring a loop containing a kernel call with an operator. i.e.
        the PSy layer passed 'cell' to the kernel rather than
        'cmap(colour, cell)'.

        4) #542 generate correct OpenMP private list. This was actually
        fixed by the changes made under #360 (change 2 above) so this
        ticket only adds a test for this functionality.

release 1.2.0

	1) #415 Support for parsing stencil information supplied in
	Dynamo 0.3 kernel meta-data.

	2) #367 Make gocean python conform to pep8

	3) #230 Add documentation for the GOcean1.0 API

	4) #379 Make f2pygen and its tests conform to pep8, pylint and
	improve the test coverage

	5) #429 Support for read-only scalar arguments in the 0.3
	Dynamo API.

	6) #420 Support for inter-invoke halo calls and logic (for
	distributed memory)

	7) #514 Fix for a bug in the if test round a halo_exchange call
	in which arrays (vectors) did not have their index added.

	8) #521 Fix bugs in the logic for adding halo exchange calls before
	loops.

        9) #532 Fix in the logic for adding halo exchange calls before
	loops which recognises that operators do not have halos.

	10) #467 Support transformations in Distributed Memory. Enable the use
	of OpenMP (and other transformations) with DM. Note that PSyclone
	currently does not support halo swaps inside OpenMP parallel regions.

release 1.1.0

	1) #263 OpenMP (including colouring) supported for the 0.3 Dynamo
	API. Parser fails gracefully if Kernel-code parsing is
	unsuccessful.

	2) #292 Add support for user-supplied transformations/optimisations
	via a script passed to the generate function/command-line. This
	enables the use of transformations within a build system.

	3) #292 Documentation for Algorithm, PSy and Kernel layers as well
	as for transformations has been added. Documentation on using
	transformation scripts then added on top.

	4) #292 Dynamo example scripts fixed.

	5) #258 First version of kernel-stub generator added. Given kernel
	metadata as input, PSyclone has enough information to be able to
	generate stub kernel code with the appropriate arguments and
	argument ordering.

	6) #364 OpenMP fix for update 1) (ticket #263). 'ncolour' variable
	now declared. New dynamo/eg3 example added to demonstrate the use
	of transformation scripts introduced in update 2) (ticket #292).

	7) #361 Minor updates to the kernel-stub generator. Remove spurious
	dir() command, remove additional '_code' from kernel subroutine name
	and add 'implicit none' to the generated subroutine.

	8) #363 Update to the generator script to catch any run-time
	errors generated by the user-supplied optimisation script. Such
	errors are then reported in a user-friendly fashion to aid
	debugging.

	9) #272 Added support for explicit loop bounds in the PSy layer
	for the GOcean1.0 API. The Cray compiler makes use of this
	information to generate more efficient code. This option can be
	switched on or off using a transformation.

        10) Support the module in-lining of kernel subroutines. i.e.
        kernel subroutines can be moved into the same module that contains
        the invoke from which they are called. This functionality is
        implemented as a new transformation, 'KernelModuleInlineTrans'.
        psyGen.py has also been made fully pep8 compliant.

        11) #347 Add an option to limit the length of lines of fortran
        code that PSyclone generates to 132 chars. This is the length
        mandated by the Fortran free-format standard and is rigorously
        enforced by some compilers (e.g. PGI). As a part of this change
        PSyclone now checks the length of all lines of source code in
	the Algorithm and Kernel files that it parses.

        12) #395 Add support for new function spaces: Wtheta, W2H and W2V.

	13) #396 and #397 Make all tests work with Python 2.6. Previously
	two of the tests only worked in Python 2.7 and a third caused
	resource issues when using deepcopy.

        14) #355 Support operators where the "to" and "from" function
        spaces are different.

release 1.0.2

	1) #299 temporary boundary condition
	support. matrix_vector_kernel_mm now uses enforce_bc_code rather
	than enforce_boundary_w2 as the latter is no longer used.

release 1.0.1

	1) #299 temporary boundary condition support. removed the
	hardwired code and associated test that added an additional
	boundary condition array to ru_kernel as this kernel is no longer
	required. Added support for generating a boundary condition array
	in the PSy layer and passing it into the enforce_bc_kernel
	kernel. enforce_bc_kernel should be placed by the algorithm
	developer to enforce boundary conditions.

release 1.0.0
