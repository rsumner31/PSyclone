module alg
  use columnwise_op_asm_kernel_mod,      only : columnwise_op_asm_kernel_type
  use columnwise_op_app_kernel_mod,      only : columnwise_op_app_kernel_type
  use columnwise_op_mul_kernel_mod,      only : columnwise_op_mul_kernel_type
  use matrix_vector_kernel_mod,          only: matrix_vector_kernel_type

contains

  subroutine test_cma_multiply_grad_v_div_v(grad_v_cma, &
                                            div_v_cma) 
    implicit none
    type(field_type) :: p_tmp, u_v_in, u_v_out, u_v_out_cma
    type(columnwise_operator_type) :: grad_v_cma, div_v_cma
    type(columnwise_operator_type) :: grad_v_div_v_cma
    real(kind=r_def), parameter :: tolerance=1.0E-12
    character(len=32) :: label = "multiply D_v^T.D_v"


    ! Construct combined CMA operator A = D_v^T.D_v
    grad_v_div_v_cma  = grad_v_cma%columnwise_operator_product( div_v_cma)

    call invoke( columnwise_op_mul_kernel_type( grad_v_cma, &
                                                div_v_cma,  &
                                                grad_v_div_v_cma ), &
                 ! Initialise fields
                 set_field_scalar( 0.0_r_def, p_tmp       ),        &
                 set_field_scalar( 0.0_r_def, u_v_out     ),        &
                 set_field_scalar( 0.0_r_def, u_v_out_cma ),        &

                 ! Apply combined CMA operator A = D_v^T.D_v
                 columnwise_op_app_kernel_type( u_v_out_cma,        &
                                                u_v_in,             &
                                                grad_v_div_v_cma ), &
                 ! Manually apply boundary conditions
                 matrix_vector_kernel_type( p_tmp,  &
                                            u_v_in, &
                                            div_v ),                &
                 ! Successively apply divergence and gradient operators:
                 ! first D_v, then D_v^T
                 matrix_vector_kernel_type( u_v_out, &
                                            p_tmp,   &
                                            grad_v ) )

  end subroutine test_cma_multiply_grad_v_div_v

end module alg
